import csv
import re
import time
import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as mp
import plotly.graph_objects as go


start_time=time.time()

genedict=dict()
genelist=list()
pmids=list()

#Intersection Function
def intersection(a, b):
    return list(set(a) & set(b))

#Open SearchResults to process PMIDS and find common PMIDS between the genes
with open('GeneSearchResults.csv', newline='') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        genedict[row["GeneName"]]=row["PMID"]
        pmids.append(re.findall('\d+',row["PMID"]))
        genelist.append(row["GeneName"])

network= [[0] * len(genelist)] * len(genelist)

#for k,v in genedict.items():
    #print(k,v)
print(len(pmids))
a=[30592196, 30089596, 30773190, 30027464, 30385172, 31042283, 30413378, 31454018, 30205417, 30773184, 30938103, 29459574, 28346656, 31130741, 31028222, 30665872, 28825377, 30642452, 31699115, 29316288, 31752884, 30126063, 31254940, 31154543, 31602468, 31699471, 28958068, 32361810, 31176206, 31175902, 31285672, 31277011, 30149883, 28795387, 30105871, 32048008, 30797496, 30527174, 31455166, 31771739, 31829203, 30646616, 29195578, 30357709, 31097096, 31030326, 31368625, 30616471, 27413166, 31360113, 31126249, 31115697, 29940884, 30952767, 31571631, 30952742, 31215445, 30305125, 30442523, 29782069, 30536734, 30089597, 31828427, 30666800, 30725275, 29687154, 31351746, 31194613, 31039680, 30642457, 30783810, 31782256, 31492985, 30950297, 30821655, 31561135, 31282096, 31253136, 30229391, 32014946, 31894386, 28472537, 31097093, 30791870, 27516466, 30506406, 30623409, 31265163, 30770959, 31654622, 31464032, 31612416, 31271118, 30295143, 31290993, 30145925, 29915891, 29536740, 31177159, 31345185, 29661287, 31495334, 31878900, 31980929, 31023173, 28668866, 30935565, 29681411, 32173269, 29451696, 31056356, 31659111, 31445956, 30666802, 31449674, 30602039, 30327236, 31287557, 31123785, 32125893, 29778651, 30497431, 31602661, 30189719, 30898568, 31985315, 30885358, 30324773, 30177585, 30477470, 29579334, 31037897, 31088500, 31804689, 29510676, 30642444, 31721468, 31446212, 31182061, 30034229, 30527192, 30911841, 31874543, 29681240, 29571997, 28800837, 31200821, 29042049, 31927006, 31497994, 30797493, 28507206, 31668406, 31703637, 29426250, 30606672, 30691492, 31155967, 29363879, 30544255, 31520555, 30978569, 30941563, 32159882, 30919763, 29968154, 31331844, 29284349, 31414902, 30637589, 31886195, 29615460, 31244320, 30337185, 30774636, 31648501, 32047559]
b=[29451696, 31445956, 31438892, 28472537, 30773184, 31882501, 30938103, 32014946, 31804689, 32125893, 28507206, 31042283, 29510676, 30506406, 30791870, 31829203, 31782256, 30648806, 31722726, 29681411, 30486741, 29645086, 31245924, 29483918, 28346656, 31235357, 31194613, 31200819, 30295143, 31602661, 30616471, 29409112, 30218747, 29042049, 29536740, 32048008, 31735973, 31254940, 31109312, 30548240, 30507005, 31492985, 30089591, 31005223, 31414902, 31097096, 31164317, 31721468, 31499384, 31277011, 30205417, 29571997, 31253136, 31522607, 29945708, 31752884, 31384932, 30678379, 31221221, 30952742, 29782069, 29778651, 30592196, 29754785, 31175902, 30478673, 31668406, 29550987, 30536653, 30089596, 30531840, 30544255, 32159882, 31265163, 31886195, 31654622, 31368625, 27413166, 31290993, 29915891, 30847822, 31126249, 31878900, 31810952, 30652510, 31215445, 30305125, 31088404, 30222060, 31350622, 30497431, 30885358, 30324773, 30477470, 30725275, 30049203, 31721446, 31351746, 31147169, 30089584, 30642457, 30783810, 31154543, 30034229, 30149883, 31200821, 30821655, 31157548, 29661287, 30413378, 30773851, 31894386, 28958068, 30797496, 30955977, 29357969, 30691492, 29656435, 30623409, 31053172, 30941563, 31432603, 30825015, 31464032, 31770849, 32047559, 30628200, 30587399, 30822531, 31243104, 31446212, 30797489, 31366504, 31025831, 30666800, 30189719, 30322398, 31832068, 30430864, 31627700, 31786738, 31028222, 28237243, 30878128, 30885351, 31097085, 31601252, 30935565, 32361810, 30952767, 30609303, 31200820, 30442523, 31439255, 30642452, 30327236, 31486229, 31481083, 31124335, 31123785, 31980929, 29945702, 30980423, 30898568, 31985315, 30480360, 31828427, 31345185, 31425965, 30952734, 30273983, 30444051, 31631997, 29564776, 30282880, 30630993, 29266226, 31606169, 31097094, 29558888, 30027464, 28499641, 28212992, 29383798, 31182061, 31381142, 30527192, 30911841, 31602468, 29459574, 31313100, 31879171, 28795387, 30946796, 31699115, 29316288, 29301544, 30415902, 29183778, 30835006, 30229391, 31699471, 30527174, 30429415, 31795418, 30900377, 30843065, 31097093, 29426250, 31820862, 32108977, 27516466, 29943841, 29363879, 31874162, 31807880, 28780685, 31393163, 31828882, 31738590, 30637589, 31118602, 31030326, 31553706, 31564835, 30859681, 31271118, 30774636, 31648501, 30145925]

c=genedict[genelist[10]]
d=genedict[genelist[16]]
print(genelist[10], genelist[16])

e=[30592196, 30089596, 30773190, 30027464, 30385172]
f=[30089596, 30773190, 30027464]
print(intersection(e,f))
count=0

df_ = pd.DataFrame(index=genelist)

#Finding common PMIDS using intersection of lists.
for m in range(len(pmids)):
    w=list()
    for n in range(len(pmids)):
        if len(intersection(pmids[m],pmids[n]))>=0:
            if m!=n:
                weight=len(intersection(pmids[m],pmids[n]))
                #print(genelist[m], genelist[n], weight)
                w.append(weight)
            else:
                weight=0
                #print(genelist[m], genelist[n], weight)
                w.append(weight)
    df_[genelist[m]]=w

print(df_)

df_.to_csv("Matrix.csv", sep='\t')

G=nx.from_pandas_adjacency(df_)
G.name='Gene To Gene Co-Citation Network'
print(nx.info(G))

mp.figure(figsize=(100, 100))

#nx.draw_networkx(G, with_labels=True, pos=nx.circular_layout(G))
nx.draw_shell(G, with_labels=True)
mp.title("Gene To Gene Co-Citation Network")
mp.show()

#nx.write_graphml(G,path="FinalGraph")
nx.write_gml(G, "MyNetwork")
nx.write_gexf(G, "Test.gexf")

print("--- %s seconds ---" % (time.time() - start_time))






